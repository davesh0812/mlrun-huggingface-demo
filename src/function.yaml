kind: job
metadata:
  name: hugging-face-classifier-trainer
  tag: ''
  hash: 7d7356b6aef44a228b69f03a4da8ffa6fc31fdcd
  project: ''
  labels:
    author: davids
  categories:
  - machine-learning
  - model-training
spec:
  command: ''
  args: []
  image: mlrun/ml-models
  build:
    functionSourceCode: 
    commands:
    - python -m pip install transformers datasets
    code_origin: https://github.com/davesh0812/functions.git#bb5e4bba28ad92d644c942ea837f4bae7484e1d4:/Users/davids/Projects/functions/hugging_face_classifier_trainer/hugging_face_classifier_trainer.py
    origin_filename: /Users/davids/Projects/functions/hugging_face_classifier_trainer/hugging_face_classifier_trainer.py
  entry_points:
    add_interface:
      name: add_interface
      doc: 'Enrich the object with this interface properties, methods and functions,
        so it will have this TensorFlow.Keras

        MLRuns features.'
      parameters:
      - name: cls
        default: ''
      - name: obj
        type: Trainer
        doc: The object to enrich his interface.
        default: ''
      - name: restoration
        type: MLRunInterfaceRestorationType
        doc: Restoration information tuple as returned from 'remove_interface' in
          order to add the interface in a certain state.
        default: null
      outputs:
      - default: ''
      lineno: 46
    mlrun_train:
      name: mlrun_train
      doc: 'MLRuns tf.keras.Model.fit wrapper. It will setup the optimizer when using
        horovod. The optimizer must be

        passed in a keyword argument and when using horovod, it must be passed as
        an Optimizer instance, not a string.


        raise MLRunInvalidArgumentError: In case the optimizer provided did not follow
        the instructions above.'
      parameters:
      - name: cls
        default: ''
      outputs:
      - default: ''
      lineno: 64
    wrapper:
      name: wrapper
      doc: ''
      parameters:
      - name: self
        type: Trainer
        default: ''
      outputs:
      - default: ''
      lineno: 74
    on_epoch_begin:
      name: on_epoch_begin
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 121
    on_epoch_end:
      name: on_epoch_end
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 130
    on_log:
      name: on_log
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      - name: logs
        type: Dict[str, float]
        default: null
      outputs:
      - default: ''
      lineno: 139
    on_train_begin:
      name: on_train_begin
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 163
    on_train_end:
      name: on_train_end
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      - name: model
        type: PreTrainedModel
        default: null
      - name: tokenizer
        type: PreTrainedTokenizer
        default: null
      outputs:
      - default: ''
      lineno: 172
    on_evaluate:
      name: on_evaluate
      doc: ''
      parameters:
      - name: self
        default: ''
      - name: args
        type: TrainingArguments
        default: ''
      - name: state
        type: TrainerState
        default: ''
      - name: control
        type: TrainerControl
        default: ''
      outputs:
      - default: ''
      lineno: 223
    apply_mlrun:
      name: apply_mlrun
      doc: Wrap the given model with MLRun's interface providing it with mlrun's additional
        features.
      parameters:
      - name: huggingface_object
        type: Trainer
        doc: The model to wrap. Can be loaded from the model path given as well.
        default: ''
      - name: model_name
        type: str
        doc: 'The model name to use for storing the model artifact. Default: "model".'
        default: null
      - name: tag
        type: str
        doc: The model's tag to log with.
        default: ''
      - name: context
        type: MLClientCtx
        doc: MLRun context to work with. If no context is given it will be retrieved
          via 'mlrun.get_or_create_ctx(None)'
        default: null
      - name: auto_log
        type: bool
        doc: 'Whether to enable MLRun''s auto logging. Default: True.'
        default: true
      - name: labels
        type: Dict[str, str]
        default: null
      - name: extra_data
        type: dict
        default: null
      outputs:
      - default: ''
      lineno: 266
    train:
      name: train
      doc: Training and evaluating a pretrained model with a pretrained tokenizer
        over a dataset.
      parameters:
      - name: context
        type: MLClientCtx
        doc: MLRun context
        default: ''
      - name: dataset_name
        type: str
        doc: The name of the dataset to get from the HuggingFace hub
        default: null
      - name: drop_columns
        type: Optional[List[str]]
        doc: The columns to drop from the dataset.
        default: null
      - name: pretrained_tokenizer
        type: str
        doc: The name of the pretrained tokenizer from the HuggingFace hub.
        default: null
      - name: pretrained_model
        type: str
        doc: The name of the pretrained model from the HuggingFace hub.
        default: null
      - name: model_class
        type: str
        doc: The class of the model, e.g. `transformers.AutoModelForSequenceClassification`
        default: null
      - name: model_name
        type: str
        doc: The model's name to use for storing the model artifact, default to 'model'
        default: huggingface_model
      - name: label_name
        type: str
        doc: The target label of the column in the dataset.
        default: labels
      - name: text_col
        type: str
        doc: The input text column un the dataset.
        default: text
      - name: num_of_train_samples
        type: int
        doc: Max number of training samples, for debugging.
        default: null
      - name: train_test_split_size
        type: float
        doc: Should be between 0.0 and 1.0 and represent the proportion of the dataset
          to include in the test split.
        default: null
      - name: metrics
        type: List[str]
        doc: List of different metrics for evaluate the model such as f1, accuracy
          etc.
        default: null
      - name: random_state
        type: int
        doc: Random state for train_test_split
        default: null
      outputs:
      - default: ''
      lineno: 420
    preprocess_function:
      name: preprocess_function
      doc: ''
      parameters:
      - name: examples
        default: ''
      outputs:
      - default: ''
      lineno: 462
  description: Automatic train, evaluate and predict functions for the ML frameworks
    - Scikit-Learn, XGBoost and LightGBM.
  default_handler: train
  disable_auto_mount: false
  env: []
  priority_class_name: ''
  preemption_mode: prevent
  affinity: null
  tolerations: null
  security_context: {}
verbose: false
